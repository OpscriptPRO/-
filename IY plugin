local getconnections = getconnections or get_signal_cons
if getconnections then
	for _, v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
		v:Disable()
	end
end
local LoadUrl = function(str)
	return loadstring(game:HttpGet(str, true))()
end
if not IY_LOADED then
	LoadUrl("https://cdn.jsdelivr.net/gh/EdgeIY/infiniteyield@master/source")
	wait(0.75)
end

local IS_Settings = {
	["Version"] = "1.3.6",
	["Invite"] = "dv96SXYmxz",
	["Plugins"] = LoadUrl("https://cdn.jsdelivr.net/gh/Infinite-Store/Infinite-Store@main/sources.luau"),
	["NsfwPlugins"] = LoadUrl(
		"https://cdn.jsdelivr.net/gh/Infinite-Store/Infinite-Store@main/plugins/nsfwplugins/sources.luau"
	),
}

local ann = "THIS IS NOW ARCHIVED AND IS DEAD, join the official IS  VwCGhNu9Rb"
local _UserSettings = {
	["StartMinimized"] = false,
	["SafeMode"] = false,
	["NoNotifications"] = false,
	["SkipIntro"] = false,
	["Announcement"] = "",
}

local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local format, gsub = string.format, string.gsub

local DefaultSettings = HttpService:JSONEncode(_UserSettings)
local SaveFileName = "infinite-store.json"
local NoSaving = false
local write_cooldown = false
local writefileCooldown
writefileCooldown = function(name, data)
	spawn(function()
		if not write_cooldown then
			write_cooldown = true
			writefile(name, data)
		else
			repeat
				wait()
			until write_cooldown == false
			writefileCooldown(name, data)
		end
		wait(3)
		write_cooldown = false
	end)
end
local canWrite = function()
	if writefile then
		return true
	end
end
local LoadSettings
LoadSettings = function()
	if canWrite() then
		if pcall(function()
			readfile(SaveFileName)
		end) then
			if readfile(SaveFileName) ~= nil then
				local success, response = pcall(function()
					local json = HttpService:JSONDecode(readfile(SaveFileName))
					if json.StartMinimized ~= nil then
						_UserSettings.StartMinimized = json.StartMinimized
					else
						_UserSettings.StartMinimized = false
					end
					if json.SafeMode ~= nil then
						_UserSettings.SafeMode = json.SafeMode
					else
						_UserSettings.SafeMode = false
					end
					if json.NoNotifications ~= nil then
						_UserSettings.NoNotifications = json.NoNotifications
					else
						_UserSettings.NoNotifications = false
					end
					if json.SkipIntro ~= nil then
						_UserSettings.SkipIntro = json.SkipIntro
					else
						_UserSettings.SkipIntro = false
					end
					if json.Announcement ~= nil then
						_UserSettings.Announcement = json.Announcement
					else
						_UserSettings.Announcement = ""
					end
				end)
				if not success then
					warn("Save Json Error:", response)
					warn("Overwriting Save File")
					writefileCooldown(SaveFileName, DefaultSettings)
					wait()
					LoadSettings()
				end
			else
				writefileCooldown(SaveFileName, DefaultSettings)
				wait()
				LoadSettings()
			end
		else
			writefileCooldown(SaveFileName, DefaultSettings)
			wait()
			if pcall(function()
				readfile(SaveFileName)
			end) then
				LoadSettings()
			else
				NoSaving = true
				_UserSettings.StartMinimized = false
				_UserSettings.SafeMode = false
				_UserSettings.NoNotifications = false
				_UserSettings.SkipIntro = false
				_UserSettings.Announcement = ""
			end
		end
	else
		_UserSettings.StartMinimized = false
		_UserSettings.SafeMode = false
		_UserSettings.NoNotifications = false
		_UserSettings.SkipIntro = false
		_UserSettings.Announcement = ""
	end
end
LoadSettings()
local UpdateSettings = function()
	if not NoSaving and canWrite() then
		local update = {
			["StartMinimized"] = _UserSettings.StartMinimized,
			["SafeMode"] = _UserSettings.SafeMode,
			["NoNotifications"] = _UserSettings.NoNotifications,
			["SkipIntro"] = _UserSettings.SkipIntro,
			["Announcement"] = _UserSettings.Announcement,
		}
		writefileCooldown(SaveFileName, HttpService:JSONEncode(update))
	end
end

if IS_LOADED then
	--[[
	if _UserSettings.NoNotifications == false then
		notify(
			"Infinite Store",
			"Infinite Store is already executed, a button can be found to open it in IY Settings",
			5
		)
	end
	error("Infinite Store is already running!", 0)
]]
	return
end
pcall(function()
	getgenv().IS_LOADED = true
end)

local newRandomString = function()
	local length = math.random(10, 20)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

if ann ~= "" and _UserSettings.Announcement ~= ann then
	local AnnGUI = Instance.new("Frame")
	local background = Instance.new("Frame")
	local TextBox = Instance.new("TextLabel")
	local shadow = Instance.new("Frame")
	local PopupText = Instance.new("TextLabel")
	local Exit = Instance.new("TextButton")
	local ExitImage = Instance.new("ImageLabel")
	AnnGUI.Name = newRandomString()
	AnnGUI.Parent = PARENT
	AnnGUI.Active = true
	AnnGUI.BackgroundTransparency = 1
	AnnGUI.Position = UDim2.new(0.5, -180, 0, -500)
	AnnGUI.Size = UDim2.new(0, 360, 0, 20)
	AnnGUI.ZIndex = 10
	background.Name = "background"
	background.Parent = AnnGUI
	background.Active = true
	background.BackgroundColor3 = currentShade1 or Color3.fromRGB(36, 36, 37)
	background.BorderSizePixel = 0
	background.Position = UDim2.new(0, 0, 0, 20)
	background.Size = UDim2.new(0, 360, 0, 150)
	background.ZIndex = 10
	TextBox.Parent = background
	TextBox.BackgroundTransparency = 1
	TextBox.Position = UDim2.new(0, 5, 0, 5)
	TextBox.Size = UDim2.new(0, 350, 0, 140)
	TextBox.Font = Enum.Font.SourceSans
	TextBox.TextSize = 18
	TextBox.TextWrapped = true
	TextBox.Text = ann
	TextBox.TextColor3 = currentText1 or Color3.new(1, 1, 1)
	TextBox.TextXAlignment = Enum.TextXAlignment.Left
	TextBox.TextYAlignment = Enum.TextYAlignment.Top
	TextBox.ZIndex = 10
	shadow.Name = "shadow"
	shadow.Parent = AnnGUI
	shadow.BackgroundColor3 = currentShade2 or Color3.fromRGB(46, 46, 47)
	shadow.BorderSizePixel = 0
	shadow.Size = UDim2.new(0, 360, 0, 20)
	shadow.ZIndex = 10
	PopupText.Name = "PopupText"
	PopupText.Parent = shadow
	PopupText.BackgroundTransparency = 1
	PopupText.Size = UDim2.new(1, 0, 0.95, 0)
	PopupText.ZIndex = 10
	PopupText.Font = Enum.Font.SourceSans
	PopupText.TextSize = 14
	PopupText.Text = "Infinite Store Announcement"
	PopupText.TextColor3 = currentText1 or Color3.new(1, 1, 1)
	PopupText.TextWrapped = true
	Exit.Name = "Exit"
	Exit.Parent = shadow
	Exit.BackgroundTransparency = 1
	Exit.Position = UDim2.new(1, -20, 0, 0)
	Exit.Size = UDim2.new(0, 20, 0, 20)
	Exit.Text = ""
	Exit.ZIndex = 10
	ExitImage.Parent = Exit
	ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
	ExitImage.BackgroundTransparency = 1
	ExitImage.Position = UDim2.new(0, 5, 0, 5)
	ExitImage.Size = UDim2.new(0, 10, 0, 10)
	ExitImage.Image = "rbxassetid://5054663650"
	ExitImage.ZIndex = 10
	spawn(function()
		wait(0.3)
		AnnGUI:TweenPosition(UDim2.new(0.5, -180, 0, 10), "InOut", "Quart", 0.5, true, nil)
		Exit.MouseButton1Click:Connect(function()
			AnnGUI:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
			wait(0.6)
			AnnGUI:Destroy()
		end)
	end)
	_UserSettings.Announcement = ann
	UpdateSettings()
end

local InfStoreBtn = makeSettingsButton("Infinite Store", "rbxassetid://2161586955")
InfStoreBtn.Position = UDim2.new(0, 5, 0, 235)
InfStoreBtn.Size = UDim2.new(1, -10, 0, 25)
InfStoreBtn.Name = "InfStore"
InfStoreBtn.Parent = SettingsHolder
SettingsHolder.CanvasSize = UDim2.new(0, 0, 0, 265)

local ServerParent = nil
if not is_sirhurt_closure and (syn and syn.protect_gui) then
	local Main = Instance.new("ScreenGui")
	Main.Name = newRandomString()
	syn.protect_gui(Main)
	Main.Parent = CoreGui
	ServerParent = Main
elseif get_hidden_gui or gethui then
	local hiddenUI = get_hidden_gui or gethui
	local Main = Instance.new("ScreenGui")
	Main.Name = newRandomString()
	Main.Parent = hiddenUI()
	ServerParent = Main
elseif CoreGui:FindFirstChild("RobloxGui") then
	ServerParent = CoreGui.RobloxGui
else
	local Main = Instance.new("ScreenGui")
	Main.Name = newRandomString()
	Main.Parent = CoreGui
	ServerParent = Main
end

if getgenv then
	getgenv().InfiniteStore = ServerParent
else
	_G.InfiniteStore = ServerParent
end

ServerParent.ResetOnSpawn = false
ServerParent.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local dragGUI = function(gui)
	task.spawn(function()
		local dragging
		local dragInput
		local dragStart = Vector3.new(0, 0, 0)
		local startPos
		local update = function(input)
			local delta = input.Position - dragStart
			local Position =
				UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			TweenService:Create(gui, TweenInfo.new(0.20), { Position = Position }):Play()
		end
		gui.InputBegan:Connect(function(input)
			if
				input.UserInputType == Enum.UserInputType.MouseButton1
				or input.UserInputType == Enum.UserInputType.Touch
			then
				dragging = true
				dragStart = input.Position
				startPos = gui.Position
				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)
		gui.InputChanged:Connect(function(input)
			if
				input.UserInputType == Enum.UserInputType.MouseMovement
				or input.UserInputType == Enum.UserInputType.Touch
			then
				dragInput = input
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if input == dragInput and dragging then
				update(input)
			end
		end)
	end)
end

local autoCanvas = function(scrollframe, layout)
	if not scrollframe:IsA("ScrollingFrame") then
		return error("Invalid argument #1 to 'autoCanvas' (expected ScrollingFrame)", 0)
	end
	if not (layout:IsA("UIListLayout") or layout:IsA("UIGridLayout") or layout:IsA("UIPageLayout")) then
		return error("Invalid argument #2 to 'autoCanvas' (expected a UILayout)", 0)
	end
	scrollframe.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y)
	layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		scrollframe.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y)
	end)
end

local mainFrame = Instance.new("Frame")
dragGUI(mainFrame)

if _UserSettings.StartMinimized == true then
	mainFrame.Visible = false
	if _UserSettings.NoNotifications == false then
		notify(
			"Infinite Store",
			"Start Minimized is turned on, Infinite Store can be opened inside of Infinite Yield's Settings"
		)
	end
else
	mainFrame.Visible = true
	if _UserSettings.NoNotifications == false then
		notify("Infinite Store", "Start Minimized is turned off, this can be disabled in settings")
	end
end

local TopBar = Instance.new("Frame")
local Title = Instance.new("TextLabel")
local Close = Instance.new("TextButton")
local ImageLabel = Instance.new("ImageLabel")
local ListHolder = Instance.new("Frame")
local Home = Instance.new("Frame")
local Welcome = Instance.new("TextLabel")
local cart = Instance.new("ImageLabel")
local text = Instance.new("ImageLabel")
local Epik = Instance.new("Frame")
local Round = Instance.new("ImageLabel")
local Photo = Instance.new("ImageLabel")
local Name = Instance.new("TextLabel")
local Credit = Instance.new("TextLabel")
local Devs = Instance.new("Frame")
local Round_2 = Instance.new("ImageLabel")
local Photo_2 = Instance.new("ImageLabel")
local Name_2 = Instance.new("TextLabel")
local Credit_2 = Instance.new("TextLabel")
local Photo2 = Instance.new("ImageLabel")
local Name2 = Instance.new("TextLabel")
local Photo3 = Instance.new("ImageLabel")
local Name3 = Instance.new("TextLabel")
local List = Instance.new("Frame")
local List1 = Instance.new("TextLabel")
local List2 = Instance.new("TextLabel")
local List3 = Instance.new("TextLabel")
local List4 = Instance.new("TextLabel")
local Plugins = Instance.new("Frame")
local TopBarExample = Instance.new("Frame")
local _4Install = Instance.new("TextLabel")
local _3Created = Instance.new("TextLabel")
local _2Author = Instance.new("TextLabel")
local _1Name = Instance.new("TextLabel")
local UIListLayout = Instance.new("UIListLayout")
local List_2 = Instance.new("ScrollingFrame")
local UIGridLayout = Instance.new("UIGridLayout")
local Template = Instance.new("Frame")
local PluginName = Instance.new("TextLabel")
local InfoBtn = Instance.new("ImageButton")
local Author = Instance.new("TextLabel")
local UIListLayout_2 = Instance.new("UIListLayout")
local Created = Instance.new("TextLabel")
local Install = Instance.new("TextButton")
local SearchBar = Instance.new("Frame")
local Search = Instance.new("TextBox")
local Icon = Instance.new("ImageLabel")
local Settings = Instance.new("Frame")
local List_3 = Instance.new("ScrollingFrame")
local UIGridLayout_2 = Instance.new("UIGridLayout")
local Template_2 = Instance.new("Frame")
local Description = Instance.new("TextLabel")
local SettingName = Instance.new("TextLabel")
local CheckBox = Instance.new("Frame")
local Btn = Instance.new("ImageButton")
local Checked = Instance.new("Frame")
local SideBar = Instance.new("Frame")
local Holder = Instance.new("Frame")
local UIListLayout_3 = Instance.new("UIListLayout")
local Home_2 = Instance.new("TextButton")
local cs = Instance.new("BoolValue")
local Plugins_2 = Instance.new("TextButton")
local cs_2 = Instance.new("BoolValue")
local Settings_2 = Instance.new("TextButton")
local cs_3 = Instance.new("BoolValue")
local DiscordInvite = Instance.new("TextLabel")
local PluginInfo = Instance.new("Frame")
local PluginInfo_2 = Instance.new("Frame")
local InfoLabel = Instance.new("TextLabel")
local PluginName_2 = Instance.new("TextLabel")
local List_4 = Instance.new("ScrollingFrame")
local UIGridLayout_3 = Instance.new("UIGridLayout")
local Command = Instance.new("TextLabel")
mainFrame.Name = "mainFrame"
mainFrame.Parent = ServerParent
mainFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
mainFrame.BackgroundTransparency = 1.000
mainFrame.BorderColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.BorderSizePixel = 0
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -150)
mainFrame.Size = UDim2.new(0, 500, 0, 320)
mainFrame.ZIndex = 10
TopBar.Name = "TopBar"
TopBar.Parent = mainFrame
TopBar.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
TopBar.BorderSizePixel = 0
TopBar.Size = UDim2.new(1, 0, 0, 20)
TopBar.ZIndex = 10
Title.Name = "Title"
Title.Parent = TopBar
Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Title.BackgroundTransparency = 1.000
Title.Position = UDim2.new(0.149999946, 0, 0, 0)
Title.Size = UDim2.new(0.850000083, 0, 0.949999988, 0)
Title.ZIndex = 10
Title.Font = Enum.Font.SourceSans
Title.Text = "Infinite Store"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 14.000
Close.Name = "Close"
Close.Parent = TopBar
Close.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Close.BackgroundTransparency = 1.000
Close.Position = UDim2.new(1, -20, 0, 0)
Close.Size = UDim2.new(0, 20, 0, 20)
Close.ZIndex = 10
Close.Font = Enum.Font.SourceSans
Close.Text = ""
Close.TextColor3 = Color3.fromRGB(255, 255, 255)
Close.TextSize = 14.000
ImageLabel.Parent = Close
ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel.BackgroundTransparency = 1.000
ImageLabel.Position = UDim2.new(0, 5, 0, 5)
ImageLabel.Size = UDim2.new(0, 10, 0, 10)
ImageLabel.ZIndex = 10
ImageLabel.Image = "rbxassetid://5054663650"
ListHolder.Name = "ListHolder"
ListHolder.Parent = mainFrame
ListHolder.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
ListHolder.BorderSizePixel = 0
ListHolder.ClipsDescendants = true
ListHolder.Position = UDim2.new(0, 0, 0, 20)
ListHolder.Size = UDim2.new(1, 0, 0, 300)
ListHolder.ZIndex = 10
Home.Name = "Home"
Home.Parent = ListHolder
Home.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Home.BorderSizePixel = 0
Home.ClipsDescendants = true
Home.Position = UDim2.new(0, 75, 0, 0)
Home.Size = UDim2.new(0.850000024, 0, 0, 300)
Home.ZIndex = 15
Welcome.Name = "Welcome"
Welcome.Parent = Home
Welcome.BackgroundColor3 = Color3.fromRGB(42, 42, 42)
Welcome.BackgroundTransparency = 1.000
Welcome.BorderSizePixel = 0
Welcome.Position = UDim2.new(0.230750099, 0, 0.123333335, 0)
Welcome.Size = UDim2.new(0.534000397, 0, 0.203333333, 0)
Welcome.ZIndex = 51
Welcome.Font = Enum.Font.Gotham
Welcome.Text = "Welcome To"
Welcome.TextColor3 = Color3.fromRGB(206, 206, 206)
Welcome.TextSize = 30.000
Welcome.TextTransparency = 1.000
Welcome.TextWrapped = true
cart.Name = "cart"
c